#import <Foundation/NSRange.h>
@implementation RolloutDynamic(blocks)

- (id)blockFor_classMethod_ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^id(id rcv, id arg0) {
    id (*originalFunction)(id rcv, SEL _cmd, id arg0) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    }

    id (^swizzleBlock)() = ^id() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            id $; __strong id* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.objCObjectPointerValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_ObjCObjectPointer___ObjCObjectPointer___Pointer___Pointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^id(id rcv, id arg0, void* arg1, void* arg2) {
    id (*originalFunction)(id rcv, SEL _cmd, id arg0, void* arg1, void* arg2) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithPointer:arg1], 
     [[RolloutTypeWrapper alloc] initWithPointer:arg2], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).pointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).pointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    }

    id (^swizzleBlock)() = ^id() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).pointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).pointerValue, ((RolloutTypeWrapper*)arguments[2]).pointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            id $; __strong id* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.objCObjectPointerValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_Void___ObjCObjectPointer___ObjCObjectPointer___BlockPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0, id arg1, id arg2) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1, id arg2) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
     [[RolloutTypeWrapper alloc] initWithBlockPointer:arg2], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).blockPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_Void_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv) {
    void (*originalFunction)(id rcv, SEL _cmd) = (void *) originalImplementation;

    NSArray *originalArguments = @[];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector)); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_Void___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_Void___ObjCObjectPointer___Enum___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0, __rollout_enum arg1, id arg2) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0, __rollout_enum arg1, id arg2) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithEnum:arg1], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg2], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).enumValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_BOOL___ObjCObjectPointer___ObjCObjectPointer___ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^BOOL(id rcv, id arg0, id arg1, id arg2, id arg3) {
    BOOL (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1, id arg2, id arg3) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg2], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg3], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2, arg3);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    }

    BOOL (^swizzleBlock)() = ^BOOL() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            BOOL $; BOOL* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.boolValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_instanceMethod_BOOL___ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^BOOL(id rcv, id arg0, id arg1) {
    BOOL (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    }

    BOOL (^swizzleBlock)() = ^BOOL() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            BOOL $; BOOL* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.boolValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_Void___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_classMethod_Void___ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0, id arg1) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^id(id rcv) {
    id (*originalFunction)(id rcv, SEL _cmd) = (void *) originalImplementation;

    NSArray *originalArguments = @[];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector));
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    }

    id (^swizzleBlock)() = ^id() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            id $; __strong id* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.objCObjectPointerValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_instanceMethod_Void___ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0, id arg1) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_classMethod_ObjCObjectPointer___ObjCObjectPointer___ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^id(id rcv, id arg0, id arg1, id arg2) {
    id (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1, id arg2) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg2], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    }

    id (^swizzleBlock)() = ^id() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            id $; __strong id* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.objCObjectPointerValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_BOOL_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^BOOL(id rcv) {
    BOOL (*originalFunction)(id rcv, SEL _cmd) = (void *) originalImplementation;

    NSArray *originalArguments = @[];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector));
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    }

    BOOL (^swizzleBlock)() = ^BOOL() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            BOOL $; BOOL* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.boolValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^id(id rcv) {
    id (*originalFunction)(id rcv, SEL _cmd) = (void *) originalImplementation;

    NSArray *originalArguments = @[];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector));
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    }

    id (^swizzleBlock)() = ^id() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            id $; __strong id* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.objCObjectPointerValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_instanceMethod_Void___BOOL_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, BOOL arg0) {
    void (*originalFunction)(id rcv, SEL _cmd, BOOL arg0) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithBool:arg0], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_Void___BOOL___BOOL_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, BOOL arg0, BOOL arg1) {
    void (*originalFunction)(id rcv, SEL _cmd, BOOL arg0, BOOL arg1) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithBool:arg0], 
     [[RolloutTypeWrapper alloc] initWithBool:arg1], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue, ((RolloutTypeWrapper*)arguments[1]).boolValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue, ((RolloutTypeWrapper*)arguments[1]).boolValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue, ((RolloutTypeWrapper*)arguments[1]).boolValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).boolValue, ((RolloutTypeWrapper*)arguments[1]).boolValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_Void___ObjCObjectPointer___Int_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0, int arg1) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0, int arg1) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithInt:arg1], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_BOOL___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^BOOL(id rcv, id arg0) {
    BOOL (*originalFunction)(id rcv, SEL _cmd, id arg0) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    }

    BOOL (^swizzleBlock)() = ^BOOL() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            BOOL $; BOOL* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.boolValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_instanceMethod_Void___ObjCObjectPointer___ObjCObjectPointer___ObjCObjectPointer___Enum___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0, id arg1, id arg2, __rollout_enum arg3, id arg4) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1, id arg2, __rollout_enum arg3, id arg4) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg2], 
     [[RolloutTypeWrapper alloc] initWithEnum:arg3], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg4], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2, arg3, arg4); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).enumValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).enumValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).enumValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[3]).enumValue, ((RolloutTypeWrapper*)arguments[4]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_Int___ObjCObjectPointer___Int_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^int(id rcv, id arg0, int arg1) {
    int (*originalFunction)(id rcv, SEL _cmd, id arg0, int arg1) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithInt:arg1], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.intValue;
    }

    int (^swizzleBlock)() = ^int() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithInt:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).intValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.intValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            int $; int* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.intValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_instanceMethod_ObjCObjectPointer___ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^id(id rcv, id arg0, id arg1) {
    id (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    }

    id (^swizzleBlock)() = ^id() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            id $; __strong id* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.objCObjectPointerValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_instanceMethod_Void___ObjCObjectPointer___ObjCObjectPointer___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv, id arg0, id arg1, id arg2) {
    void (*originalFunction)(id rcv, SEL _cmd, id arg0, id arg1, id arg2) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg1], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg2], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[1]).objCObjectPointerValue, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue);;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_Enum_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^__rollout_enum(id rcv) {
    __rollout_enum (*originalFunction)(id rcv, SEL _cmd) = (void *) originalImplementation;

    NSArray *originalArguments = @[];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector));
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.enumValue;
    }

    __rollout_enum (^swizzleBlock)() = ^__rollout_enum() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:originalFunction(rcv, NSSelectorFromString(methodId.selector))];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithEnum:originalFunction(rcv, NSSelectorFromString(methodId.selector))];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.enumValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            __rollout_enum $; __rollout_enum* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.enumValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_BOOL___ObjCObjectPointer___Record_struct_RolloutSpace__NSRange___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^BOOL(id rcv, id arg0, struct _NSRange arg1, id arg2) {
    BOOL (*originalFunction)(id rcv, SEL _cmd, id arg0, struct _NSRange arg1, id arg2) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithRecordPointer:&arg1 ofSize:sizeof(struct _NSRange) shouldBeFreedInDealloc:NO], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg2], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    }

    BOOL (^swizzleBlock)() = ^BOOL() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            BOOL $; BOOL* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.boolValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_Void_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^void(id rcv) {
    void (*originalFunction)(id rcv, SEL _cmd) = (void *) originalImplementation;

    NSArray *originalArguments = @[];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       originalFunction(rcv, NSSelectorFromString(methodId.selector)); return;
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));;
                  
                break;
        }
        return;
    }

    void (^swizzleBlock)() = ^void() {
        
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));
                  
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  originalFunction(rcv, NSSelectorFromString(methodId.selector));;
                  
                break;
        }
        return;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    swizzleBlock(); return;
  };
}

- (id)blockFor_instanceMethod_BOOL___ObjCObjectPointer___Record_struct_RolloutSpace__NSRange___ObjCObjectPointer_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^BOOL(id rcv, id arg0, struct _NSRange arg1, id arg2) {
    BOOL (*originalFunction)(id rcv, SEL _cmd, id arg0, struct _NSRange arg1, id arg2) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg0], 
     [[RolloutTypeWrapper alloc] initWithRecordPointer:&arg1 ofSize:sizeof(struct _NSRange) shouldBeFreedInDealloc:NO], 
     [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:arg2], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0, arg1, arg2);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    }

    BOOL (^swizzleBlock)() = ^BOOL() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithBool:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).objCObjectPointerValue, *(struct _NSRange*)((RolloutTypeWrapper*)arguments[1]).recordPointer, ((RolloutTypeWrapper*)arguments[2]).objCObjectPointerValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.boolValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            BOOL $; BOOL* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.boolValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}

- (id)blockFor_classMethod_ObjCObjectPointer___Int_withOriginalImplementation:(IMP)originalImplementation methodId:(RolloutMethodId *)methodId
{
  return ^id(id rcv, int arg0) {
    id (*originalFunction)(id rcv, SEL _cmd, int arg0) = (void *) originalImplementation;

    NSArray *originalArguments = @[     [[RolloutTypeWrapper alloc] initWithInt:arg0], 
];
    NSArray *tweakConfiguration = _configuration.configurationsByMethodId[methodId];
    RolloutInvocationsList *invocationsList = [_invocationsListFactory invocationsListFromTweakConfiguration:tweakConfiguration];
    RolloutInvocation *inv = [invocationsList invocationForArguments:originalArguments];
    
    if(!inv) {
       return originalFunction(rcv, NSSelectorFromString(methodId.selector), arg0);
    }

    if(inv.forceMainThreadType == RolloutInvocation_ForceMainThreadType_off || [NSThread isMainThread]) {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).intValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).intValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    }

    id (^swizzleBlock)() = ^id() {
        RolloutTypeWrapper *__rollout_r;
        [inv runBefore];
    
        inv.originalArguments = originalArguments;
        NSArray *arguments = inv.tweakedArguments;
    
        switch ([inv type]) {
            case RolloutInvocationTypeDisable:
                __rollout_r = [inv defaultReturnValue];
                break;
            case RolloutInvocationTypeTryCatch:
                @try{
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).intValue)];
                  __rollout_r =   [inv conditionalReturnValue];
                }
                @catch(id e){
                    [inv runAfterExceptionCaught];
                    __rollout_r = [inv defaultReturnValue];
                }
                break;
            case RolloutInvocationTypeNormal:
            default:
                  inv.originalReturnValue = [[RolloutTypeWrapper alloc] initWithObjCObjectPointer:originalFunction(rcv, NSSelectorFromString(methodId.selector), ((RolloutTypeWrapper*)arguments[0]).intValue)];;
                  __rollout_r =   [inv conditionalReturnValue];
                break;
        }
        return __rollout_r.objCObjectPointerValue;
    };

    switch(inv.forceMainThreadType) {
        case RolloutInvocation_ForceMainThreadType_sync: {
            id $; __strong id* $p = &$;
            id exception = nil, __strong *exceptionPointer = &exception;

            dispatch_sync(dispatch_get_main_queue(), ^{
	        @try {
                    *$p = swizzleBlock();
                } @catch(id exception) {
                    *exceptionPointer = exception;
                }
            });
            if(exception) {
                @throw exception;
            }
            return $;
        }
        case RolloutInvocation_ForceMainThreadType_async: {
            dispatch_async(dispatch_get_main_queue(), ^{
                swizzleBlock();
            });
            return inv.defaultReturnValue.objCObjectPointerValue;
        }
        case RolloutInvocation_ForceMainThreadType_off:
        case RolloutInvocation_ForceMainThreadTypesCount:
            break;
    }
    return swizzleBlock();
  };
}
@end
